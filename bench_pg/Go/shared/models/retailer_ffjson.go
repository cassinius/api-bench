// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: shared/models/retailer.go

package model

import (
	"bytes"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *Retailer) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *Retailer) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"id":`)
	fflib.FormatBits2(buf, uint64(j.Id), 10, j.Id < 0)
	buf.WriteString(`,"gstin":`)
	fflib.WriteJsonString(buf, string(j.GSTIN))
	buf.WriteString(`,"business_name":`)
	fflib.WriteJsonString(buf, string(j.Business_name))
	buf.WriteString(`,"contact_person":`)
	fflib.WriteJsonString(buf, string(j.Contact_person))
	buf.WriteString(`,"contact_number":`)
	fflib.FormatBits2(buf, uint64(j.Contact_number), 10, j.Contact_number < 0)
	buf.WriteString(`,"contact_address":`)
	fflib.WriteJsonString(buf, string(j.Constact_address))
	buf.WriteString(`,"contact_emailId":`)
	fflib.WriteJsonString(buf, string(j.Contact_emailId))
	buf.WriteString(`,"status":`)
	fflib.WriteJsonString(buf, string(j.Status))
	buf.WriteString(`,"outlet_limit":`)
	fflib.FormatBits2(buf, uint64(j.Outlet_limit), 10, j.Outlet_limit < 0)
	buf.WriteByte('}')
	return nil
}

const (
	ffjtRetailerbase = iota
	ffjtRetailernosuchkey

	ffjtRetailerId

	ffjtRetailerGSTIN

	ffjtRetailerBusiness_name

	ffjtRetailerContact_person

	ffjtRetailerContact_number

	ffjtRetailerConstact_address

	ffjtRetailerContact_emailId

	ffjtRetailerStatus

	ffjtRetailerOutlet_limit
)

var ffjKeyRetailerId = []byte("id")

var ffjKeyRetailerGSTIN = []byte("gstin")

var ffjKeyRetailerBusiness_name = []byte("business_name")

var ffjKeyRetailerContact_person = []byte("contact_person")

var ffjKeyRetailerContact_number = []byte("contact_number")

var ffjKeyRetailerConstact_address = []byte("contact_address")

var ffjKeyRetailerContact_emailId = []byte("contact_emailId")

var ffjKeyRetailerStatus = []byte("status")

var ffjKeyRetailerOutlet_limit = []byte("outlet_limit")

// UnmarshalJSON umarshall json - template of ffjson
func (j *Retailer) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *Retailer) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtRetailerbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtRetailernosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'b':

					if bytes.Equal(ffjKeyRetailerBusiness_name, kn) {
						currentKey = ffjtRetailerBusiness_name
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'c':

					if bytes.Equal(ffjKeyRetailerContact_person, kn) {
						currentKey = ffjtRetailerContact_person
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyRetailerContact_number, kn) {
						currentKey = ffjtRetailerContact_number
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyRetailerConstact_address, kn) {
						currentKey = ffjtRetailerConstact_address
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyRetailerContact_emailId, kn) {
						currentKey = ffjtRetailerContact_emailId
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'g':

					if bytes.Equal(ffjKeyRetailerGSTIN, kn) {
						currentKey = ffjtRetailerGSTIN
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffjKeyRetailerId, kn) {
						currentKey = ffjtRetailerId
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'o':

					if bytes.Equal(ffjKeyRetailerOutlet_limit, kn) {
						currentKey = ffjtRetailerOutlet_limit
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffjKeyRetailerStatus, kn) {
						currentKey = ffjtRetailerStatus
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.AsciiEqualFold(ffjKeyRetailerOutlet_limit, kn) {
					currentKey = ffjtRetailerOutlet_limit
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyRetailerStatus, kn) {
					currentKey = ffjtRetailerStatus
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyRetailerContact_emailId, kn) {
					currentKey = ffjtRetailerContact_emailId
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyRetailerConstact_address, kn) {
					currentKey = ffjtRetailerConstact_address
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyRetailerContact_number, kn) {
					currentKey = ffjtRetailerContact_number
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyRetailerContact_person, kn) {
					currentKey = ffjtRetailerContact_person
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyRetailerBusiness_name, kn) {
					currentKey = ffjtRetailerBusiness_name
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyRetailerGSTIN, kn) {
					currentKey = ffjtRetailerGSTIN
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyRetailerId, kn) {
					currentKey = ffjtRetailerId
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtRetailernosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtRetailerId:
					goto handle_Id

				case ffjtRetailerGSTIN:
					goto handle_GSTIN

				case ffjtRetailerBusiness_name:
					goto handle_Business_name

				case ffjtRetailerContact_person:
					goto handle_Contact_person

				case ffjtRetailerContact_number:
					goto handle_Contact_number

				case ffjtRetailerConstact_address:
					goto handle_Constact_address

				case ffjtRetailerContact_emailId:
					goto handle_Contact_emailId

				case ffjtRetailerStatus:
					goto handle_Status

				case ffjtRetailerOutlet_limit:
					goto handle_Outlet_limit

				case ffjtRetailernosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Id:

	/* handler: j.Id type=int32 kind=int32 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int32", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 32)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.Id = int32(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_GSTIN:

	/* handler: j.GSTIN type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.GSTIN = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Business_name:

	/* handler: j.Business_name type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Business_name = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Contact_person:

	/* handler: j.Contact_person type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Contact_person = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Contact_number:

	/* handler: j.Contact_number type=int32 kind=int32 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int32", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 32)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.Contact_number = int32(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Constact_address:

	/* handler: j.Constact_address type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Constact_address = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Contact_emailId:

	/* handler: j.Contact_emailId type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Contact_emailId = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Status:

	/* handler: j.Status type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Status = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Outlet_limit:

	/* handler: j.Outlet_limit type=int32 kind=int32 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int32", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 32)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.Outlet_limit = int32(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
