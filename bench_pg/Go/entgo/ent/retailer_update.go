// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"retent/ent/predicate"
	"retent/ent/retailer"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RetailerUpdate is the builder for updating Retailer entities.
type RetailerUpdate struct {
	config
	hooks    []Hook
	mutation *RetailerMutation
}

// Where appends a list predicates to the RetailerUpdate builder.
func (ru *RetailerUpdate) Where(ps ...predicate.Retailer) *RetailerUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetGSTIN sets the "GSTIN" field.
func (ru *RetailerUpdate) SetGSTIN(s string) *RetailerUpdate {
	ru.mutation.SetGSTIN(s)
	return ru
}

// SetBusinessName sets the "BusinessName" field.
func (ru *RetailerUpdate) SetBusinessName(s string) *RetailerUpdate {
	ru.mutation.SetBusinessName(s)
	return ru
}

// SetContactPerson sets the "ContactPerson" field.
func (ru *RetailerUpdate) SetContactPerson(s string) *RetailerUpdate {
	ru.mutation.SetContactPerson(s)
	return ru
}

// SetContactNumber sets the "ContactNumber" field.
func (ru *RetailerUpdate) SetContactNumber(i int32) *RetailerUpdate {
	ru.mutation.ResetContactNumber()
	ru.mutation.SetContactNumber(i)
	return ru
}

// AddContactNumber adds i to the "ContactNumber" field.
func (ru *RetailerUpdate) AddContactNumber(i int32) *RetailerUpdate {
	ru.mutation.AddContactNumber(i)
	return ru
}

// SetContactAddress sets the "ContactAddress" field.
func (ru *RetailerUpdate) SetContactAddress(s string) *RetailerUpdate {
	ru.mutation.SetContactAddress(s)
	return ru
}

// SetContactEmailId sets the "ContactEmailId" field.
func (ru *RetailerUpdate) SetContactEmailId(s string) *RetailerUpdate {
	ru.mutation.SetContactEmailId(s)
	return ru
}

// SetStatus sets the "Status" field.
func (ru *RetailerUpdate) SetStatus(s string) *RetailerUpdate {
	ru.mutation.SetStatus(s)
	return ru
}

// SetOutletLimit sets the "OutletLimit" field.
func (ru *RetailerUpdate) SetOutletLimit(i int32) *RetailerUpdate {
	ru.mutation.ResetOutletLimit()
	ru.mutation.SetOutletLimit(i)
	return ru
}

// AddOutletLimit adds i to the "OutletLimit" field.
func (ru *RetailerUpdate) AddOutletLimit(i int32) *RetailerUpdate {
	ru.mutation.AddOutletLimit(i)
	return ru
}

// Mutation returns the RetailerMutation object of the builder.
func (ru *RetailerUpdate) Mutation() *RetailerMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RetailerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		if err = ru.check(); err != nil {
			return 0, err
		}
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RetailerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ru.check(); err != nil {
				return 0, err
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RetailerUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RetailerUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RetailerUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RetailerUpdate) check() error {
	if v, ok := ru.mutation.ContactNumber(); ok {
		if err := retailer.ContactNumberValidator(v); err != nil {
			return &ValidationError{Name: "ContactNumber", err: fmt.Errorf(`ent: validator failed for field "Retailer.ContactNumber": %w`, err)}
		}
	}
	if v, ok := ru.mutation.OutletLimit(); ok {
		if err := retailer.OutletLimitValidator(v); err != nil {
			return &ValidationError{Name: "OutletLimit", err: fmt.Errorf(`ent: validator failed for field "Retailer.OutletLimit": %w`, err)}
		}
	}
	return nil
}

func (ru *RetailerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   retailer.Table,
			Columns: retailer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: retailer.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.GSTIN(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: retailer.FieldGSTIN,
		})
	}
	if value, ok := ru.mutation.BusinessName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: retailer.FieldBusinessName,
		})
	}
	if value, ok := ru.mutation.ContactPerson(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: retailer.FieldContactPerson,
		})
	}
	if value, ok := ru.mutation.ContactNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: retailer.FieldContactNumber,
		})
	}
	if value, ok := ru.mutation.AddedContactNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: retailer.FieldContactNumber,
		})
	}
	if value, ok := ru.mutation.ContactAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: retailer.FieldContactAddress,
		})
	}
	if value, ok := ru.mutation.ContactEmailId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: retailer.FieldContactEmailId,
		})
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: retailer.FieldStatus,
		})
	}
	if value, ok := ru.mutation.OutletLimit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: retailer.FieldOutletLimit,
		})
	}
	if value, ok := ru.mutation.AddedOutletLimit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: retailer.FieldOutletLimit,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{retailer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// RetailerUpdateOne is the builder for updating a single Retailer entity.
type RetailerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RetailerMutation
}

// SetGSTIN sets the "GSTIN" field.
func (ruo *RetailerUpdateOne) SetGSTIN(s string) *RetailerUpdateOne {
	ruo.mutation.SetGSTIN(s)
	return ruo
}

// SetBusinessName sets the "BusinessName" field.
func (ruo *RetailerUpdateOne) SetBusinessName(s string) *RetailerUpdateOne {
	ruo.mutation.SetBusinessName(s)
	return ruo
}

// SetContactPerson sets the "ContactPerson" field.
func (ruo *RetailerUpdateOne) SetContactPerson(s string) *RetailerUpdateOne {
	ruo.mutation.SetContactPerson(s)
	return ruo
}

// SetContactNumber sets the "ContactNumber" field.
func (ruo *RetailerUpdateOne) SetContactNumber(i int32) *RetailerUpdateOne {
	ruo.mutation.ResetContactNumber()
	ruo.mutation.SetContactNumber(i)
	return ruo
}

// AddContactNumber adds i to the "ContactNumber" field.
func (ruo *RetailerUpdateOne) AddContactNumber(i int32) *RetailerUpdateOne {
	ruo.mutation.AddContactNumber(i)
	return ruo
}

// SetContactAddress sets the "ContactAddress" field.
func (ruo *RetailerUpdateOne) SetContactAddress(s string) *RetailerUpdateOne {
	ruo.mutation.SetContactAddress(s)
	return ruo
}

// SetContactEmailId sets the "ContactEmailId" field.
func (ruo *RetailerUpdateOne) SetContactEmailId(s string) *RetailerUpdateOne {
	ruo.mutation.SetContactEmailId(s)
	return ruo
}

// SetStatus sets the "Status" field.
func (ruo *RetailerUpdateOne) SetStatus(s string) *RetailerUpdateOne {
	ruo.mutation.SetStatus(s)
	return ruo
}

// SetOutletLimit sets the "OutletLimit" field.
func (ruo *RetailerUpdateOne) SetOutletLimit(i int32) *RetailerUpdateOne {
	ruo.mutation.ResetOutletLimit()
	ruo.mutation.SetOutletLimit(i)
	return ruo
}

// AddOutletLimit adds i to the "OutletLimit" field.
func (ruo *RetailerUpdateOne) AddOutletLimit(i int32) *RetailerUpdateOne {
	ruo.mutation.AddOutletLimit(i)
	return ruo
}

// Mutation returns the RetailerMutation object of the builder.
func (ruo *RetailerUpdateOne) Mutation() *RetailerMutation {
	return ruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RetailerUpdateOne) Select(field string, fields ...string) *RetailerUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Retailer entity.
func (ruo *RetailerUpdateOne) Save(ctx context.Context) (*Retailer, error) {
	var (
		err  error
		node *Retailer
	)
	if len(ruo.hooks) == 0 {
		if err = ruo.check(); err != nil {
			return nil, err
		}
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RetailerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ruo.check(); err != nil {
				return nil, err
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Retailer)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RetailerMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RetailerUpdateOne) SaveX(ctx context.Context) *Retailer {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RetailerUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RetailerUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RetailerUpdateOne) check() error {
	if v, ok := ruo.mutation.ContactNumber(); ok {
		if err := retailer.ContactNumberValidator(v); err != nil {
			return &ValidationError{Name: "ContactNumber", err: fmt.Errorf(`ent: validator failed for field "Retailer.ContactNumber": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.OutletLimit(); ok {
		if err := retailer.OutletLimitValidator(v); err != nil {
			return &ValidationError{Name: "OutletLimit", err: fmt.Errorf(`ent: validator failed for field "Retailer.OutletLimit": %w`, err)}
		}
	}
	return nil
}

func (ruo *RetailerUpdateOne) sqlSave(ctx context.Context) (_node *Retailer, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   retailer.Table,
			Columns: retailer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: retailer.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Retailer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, retailer.FieldID)
		for _, f := range fields {
			if !retailer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != retailer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.GSTIN(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: retailer.FieldGSTIN,
		})
	}
	if value, ok := ruo.mutation.BusinessName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: retailer.FieldBusinessName,
		})
	}
	if value, ok := ruo.mutation.ContactPerson(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: retailer.FieldContactPerson,
		})
	}
	if value, ok := ruo.mutation.ContactNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: retailer.FieldContactNumber,
		})
	}
	if value, ok := ruo.mutation.AddedContactNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: retailer.FieldContactNumber,
		})
	}
	if value, ok := ruo.mutation.ContactAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: retailer.FieldContactAddress,
		})
	}
	if value, ok := ruo.mutation.ContactEmailId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: retailer.FieldContactEmailId,
		})
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: retailer.FieldStatus,
		})
	}
	if value, ok := ruo.mutation.OutletLimit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: retailer.FieldOutletLimit,
		})
	}
	if value, ok := ruo.mutation.AddedOutletLimit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: retailer.FieldOutletLimit,
		})
	}
	_node = &Retailer{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{retailer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
