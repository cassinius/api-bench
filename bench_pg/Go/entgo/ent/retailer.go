// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"retent/ent/retailer"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Retailer is the model entity for the Retailer schema.
type Retailer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// GSTIN holds the value of the "GSTIN" field.
	GSTIN string `json:"gstin"`
	// BusinessName holds the value of the "BusinessName" field.
	BusinessName string `json:"business_name"`
	// ContactPerson holds the value of the "ContactPerson" field.
	ContactPerson string `json:"contact_person"`
	// ContactNumber holds the value of the "ContactNumber" field.
	ContactNumber int32 `json:"contact_number"`
	// ContactAddress holds the value of the "ContactAddress" field.
	ContactAddress string `json:"contact_address"`
	// ContactEmailId holds the value of the "ContactEmailId" field.
	ContactEmailId string `json:"contact_email_id"`
	// Status holds the value of the "Status" field.
	Status string `json:"status"`
	// OutletLimit holds the value of the "OutletLimit" field.
	OutletLimit int32 `json:"outlet_limit"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Retailer) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case retailer.FieldID, retailer.FieldContactNumber, retailer.FieldOutletLimit:
			values[i] = new(sql.NullInt64)
		case retailer.FieldGSTIN, retailer.FieldBusinessName, retailer.FieldContactPerson, retailer.FieldContactAddress, retailer.FieldContactEmailId, retailer.FieldStatus:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Retailer", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Retailer fields.
func (r *Retailer) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case retailer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case retailer.FieldGSTIN:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field GSTIN", values[i])
			} else if value.Valid {
				r.GSTIN = value.String
			}
		case retailer.FieldBusinessName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field BusinessName", values[i])
			} else if value.Valid {
				r.BusinessName = value.String
			}
		case retailer.FieldContactPerson:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ContactPerson", values[i])
			} else if value.Valid {
				r.ContactPerson = value.String
			}
		case retailer.FieldContactNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ContactNumber", values[i])
			} else if value.Valid {
				r.ContactNumber = int32(value.Int64)
			}
		case retailer.FieldContactAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ContactAddress", values[i])
			} else if value.Valid {
				r.ContactAddress = value.String
			}
		case retailer.FieldContactEmailId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ContactEmailId", values[i])
			} else if value.Valid {
				r.ContactEmailId = value.String
			}
		case retailer.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Status", values[i])
			} else if value.Valid {
				r.Status = value.String
			}
		case retailer.FieldOutletLimit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field OutletLimit", values[i])
			} else if value.Valid {
				r.OutletLimit = int32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Retailer.
// Note that you need to call Retailer.Unwrap() before calling this method if this Retailer
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Retailer) Update() *RetailerUpdateOne {
	return (&RetailerClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Retailer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Retailer) Unwrap() *Retailer {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Retailer is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Retailer) String() string {
	var builder strings.Builder
	builder.WriteString("Retailer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("GSTIN=")
	builder.WriteString(r.GSTIN)
	builder.WriteString(", ")
	builder.WriteString("BusinessName=")
	builder.WriteString(r.BusinessName)
	builder.WriteString(", ")
	builder.WriteString("ContactPerson=")
	builder.WriteString(r.ContactPerson)
	builder.WriteString(", ")
	builder.WriteString("ContactNumber=")
	builder.WriteString(fmt.Sprintf("%v", r.ContactNumber))
	builder.WriteString(", ")
	builder.WriteString("ContactAddress=")
	builder.WriteString(r.ContactAddress)
	builder.WriteString(", ")
	builder.WriteString("ContactEmailId=")
	builder.WriteString(r.ContactEmailId)
	builder.WriteString(", ")
	builder.WriteString("Status=")
	builder.WriteString(r.Status)
	builder.WriteString(", ")
	builder.WriteString("OutletLimit=")
	builder.WriteString(fmt.Sprintf("%v", r.OutletLimit))
	builder.WriteByte(')')
	return builder.String()
}

// Retailers is a parsable slice of Retailer.
type Retailers []*Retailer

func (r Retailers) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
