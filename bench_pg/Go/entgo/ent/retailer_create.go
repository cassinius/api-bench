// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"retent/ent/retailer"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RetailerCreate is the builder for creating a Retailer entity.
type RetailerCreate struct {
	config
	mutation *RetailerMutation
	hooks    []Hook
}

// SetGSTIN sets the "GSTIN" field.
func (rc *RetailerCreate) SetGSTIN(s string) *RetailerCreate {
	rc.mutation.SetGSTIN(s)
	return rc
}

// SetBusinessName sets the "BusinessName" field.
func (rc *RetailerCreate) SetBusinessName(s string) *RetailerCreate {
	rc.mutation.SetBusinessName(s)
	return rc
}

// SetContactPerson sets the "ContactPerson" field.
func (rc *RetailerCreate) SetContactPerson(s string) *RetailerCreate {
	rc.mutation.SetContactPerson(s)
	return rc
}

// SetContactNumber sets the "ContactNumber" field.
func (rc *RetailerCreate) SetContactNumber(i int32) *RetailerCreate {
	rc.mutation.SetContactNumber(i)
	return rc
}

// SetContactAddress sets the "ContactAddress" field.
func (rc *RetailerCreate) SetContactAddress(s string) *RetailerCreate {
	rc.mutation.SetContactAddress(s)
	return rc
}

// SetContactEmailId sets the "ContactEmailId" field.
func (rc *RetailerCreate) SetContactEmailId(s string) *RetailerCreate {
	rc.mutation.SetContactEmailId(s)
	return rc
}

// SetStatus sets the "Status" field.
func (rc *RetailerCreate) SetStatus(s string) *RetailerCreate {
	rc.mutation.SetStatus(s)
	return rc
}

// SetOutletLimit sets the "OutletLimit" field.
func (rc *RetailerCreate) SetOutletLimit(i int32) *RetailerCreate {
	rc.mutation.SetOutletLimit(i)
	return rc
}

// Mutation returns the RetailerMutation object of the builder.
func (rc *RetailerCreate) Mutation() *RetailerMutation {
	return rc.mutation
}

// Save creates the Retailer in the database.
func (rc *RetailerCreate) Save(ctx context.Context) (*Retailer, error) {
	var (
		err  error
		node *Retailer
	)
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RetailerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			if node, err = rc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			if rc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Retailer)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RetailerMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RetailerCreate) SaveX(ctx context.Context) *Retailer {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RetailerCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RetailerCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RetailerCreate) check() error {
	if _, ok := rc.mutation.GSTIN(); !ok {
		return &ValidationError{Name: "GSTIN", err: errors.New(`ent: missing required field "Retailer.GSTIN"`)}
	}
	if _, ok := rc.mutation.BusinessName(); !ok {
		return &ValidationError{Name: "BusinessName", err: errors.New(`ent: missing required field "Retailer.BusinessName"`)}
	}
	if _, ok := rc.mutation.ContactPerson(); !ok {
		return &ValidationError{Name: "ContactPerson", err: errors.New(`ent: missing required field "Retailer.ContactPerson"`)}
	}
	if _, ok := rc.mutation.ContactNumber(); !ok {
		return &ValidationError{Name: "ContactNumber", err: errors.New(`ent: missing required field "Retailer.ContactNumber"`)}
	}
	if v, ok := rc.mutation.ContactNumber(); ok {
		if err := retailer.ContactNumberValidator(v); err != nil {
			return &ValidationError{Name: "ContactNumber", err: fmt.Errorf(`ent: validator failed for field "Retailer.ContactNumber": %w`, err)}
		}
	}
	if _, ok := rc.mutation.ContactAddress(); !ok {
		return &ValidationError{Name: "ContactAddress", err: errors.New(`ent: missing required field "Retailer.ContactAddress"`)}
	}
	if _, ok := rc.mutation.ContactEmailId(); !ok {
		return &ValidationError{Name: "ContactEmailId", err: errors.New(`ent: missing required field "Retailer.ContactEmailId"`)}
	}
	if _, ok := rc.mutation.Status(); !ok {
		return &ValidationError{Name: "Status", err: errors.New(`ent: missing required field "Retailer.Status"`)}
	}
	if _, ok := rc.mutation.OutletLimit(); !ok {
		return &ValidationError{Name: "OutletLimit", err: errors.New(`ent: missing required field "Retailer.OutletLimit"`)}
	}
	if v, ok := rc.mutation.OutletLimit(); ok {
		if err := retailer.OutletLimitValidator(v); err != nil {
			return &ValidationError{Name: "OutletLimit", err: fmt.Errorf(`ent: validator failed for field "Retailer.OutletLimit": %w`, err)}
		}
	}
	return nil
}

func (rc *RetailerCreate) sqlSave(ctx context.Context) (*Retailer, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (rc *RetailerCreate) createSpec() (*Retailer, *sqlgraph.CreateSpec) {
	var (
		_node = &Retailer{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: retailer.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: retailer.FieldID,
			},
		}
	)
	if value, ok := rc.mutation.GSTIN(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: retailer.FieldGSTIN,
		})
		_node.GSTIN = value
	}
	if value, ok := rc.mutation.BusinessName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: retailer.FieldBusinessName,
		})
		_node.BusinessName = value
	}
	if value, ok := rc.mutation.ContactPerson(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: retailer.FieldContactPerson,
		})
		_node.ContactPerson = value
	}
	if value, ok := rc.mutation.ContactNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: retailer.FieldContactNumber,
		})
		_node.ContactNumber = value
	}
	if value, ok := rc.mutation.ContactAddress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: retailer.FieldContactAddress,
		})
		_node.ContactAddress = value
	}
	if value, ok := rc.mutation.ContactEmailId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: retailer.FieldContactEmailId,
		})
		_node.ContactEmailId = value
	}
	if value, ok := rc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: retailer.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := rc.mutation.OutletLimit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: retailer.FieldOutletLimit,
		})
		_node.OutletLimit = value
	}
	return _node, _spec
}

// RetailerCreateBulk is the builder for creating many Retailer entities in bulk.
type RetailerCreateBulk struct {
	config
	builders []*RetailerCreate
}

// Save creates the Retailer entities in the database.
func (rcb *RetailerCreateBulk) Save(ctx context.Context) ([]*Retailer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Retailer, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RetailerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RetailerCreateBulk) SaveX(ctx context.Context) []*Retailer {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RetailerCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RetailerCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
