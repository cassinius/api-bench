// Code generated by ent, DO NOT EDIT.

package retailer

import (
	"retent/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// GSTIN applies equality check predicate on the "GSTIN" field. It's identical to GSTINEQ.
func GSTIN(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGSTIN), v))
	})
}

// BusinessName applies equality check predicate on the "BusinessName" field. It's identical to BusinessNameEQ.
func BusinessName(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBusinessName), v))
	})
}

// ContactPerson applies equality check predicate on the "ContactPerson" field. It's identical to ContactPersonEQ.
func ContactPerson(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContactPerson), v))
	})
}

// ContactNumber applies equality check predicate on the "ContactNumber" field. It's identical to ContactNumberEQ.
func ContactNumber(v int32) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContactNumber), v))
	})
}

// ContactAddress applies equality check predicate on the "ContactAddress" field. It's identical to ContactAddressEQ.
func ContactAddress(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContactAddress), v))
	})
}

// ContactEmailId applies equality check predicate on the "ContactEmailId" field. It's identical to ContactEmailIdEQ.
func ContactEmailId(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContactEmailId), v))
	})
}

// Status applies equality check predicate on the "Status" field. It's identical to StatusEQ.
func Status(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// OutletLimit applies equality check predicate on the "OutletLimit" field. It's identical to OutletLimitEQ.
func OutletLimit(v int32) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOutletLimit), v))
	})
}

// GSTINEQ applies the EQ predicate on the "GSTIN" field.
func GSTINEQ(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGSTIN), v))
	})
}

// GSTINNEQ applies the NEQ predicate on the "GSTIN" field.
func GSTINNEQ(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGSTIN), v))
	})
}

// GSTINIn applies the In predicate on the "GSTIN" field.
func GSTINIn(vs ...string) predicate.Retailer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGSTIN), v...))
	})
}

// GSTINNotIn applies the NotIn predicate on the "GSTIN" field.
func GSTINNotIn(vs ...string) predicate.Retailer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGSTIN), v...))
	})
}

// GSTINGT applies the GT predicate on the "GSTIN" field.
func GSTINGT(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGSTIN), v))
	})
}

// GSTINGTE applies the GTE predicate on the "GSTIN" field.
func GSTINGTE(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGSTIN), v))
	})
}

// GSTINLT applies the LT predicate on the "GSTIN" field.
func GSTINLT(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGSTIN), v))
	})
}

// GSTINLTE applies the LTE predicate on the "GSTIN" field.
func GSTINLTE(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGSTIN), v))
	})
}

// GSTINContains applies the Contains predicate on the "GSTIN" field.
func GSTINContains(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGSTIN), v))
	})
}

// GSTINHasPrefix applies the HasPrefix predicate on the "GSTIN" field.
func GSTINHasPrefix(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGSTIN), v))
	})
}

// GSTINHasSuffix applies the HasSuffix predicate on the "GSTIN" field.
func GSTINHasSuffix(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGSTIN), v))
	})
}

// GSTINEqualFold applies the EqualFold predicate on the "GSTIN" field.
func GSTINEqualFold(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGSTIN), v))
	})
}

// GSTINContainsFold applies the ContainsFold predicate on the "GSTIN" field.
func GSTINContainsFold(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGSTIN), v))
	})
}

// BusinessNameEQ applies the EQ predicate on the "BusinessName" field.
func BusinessNameEQ(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBusinessName), v))
	})
}

// BusinessNameNEQ applies the NEQ predicate on the "BusinessName" field.
func BusinessNameNEQ(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBusinessName), v))
	})
}

// BusinessNameIn applies the In predicate on the "BusinessName" field.
func BusinessNameIn(vs ...string) predicate.Retailer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBusinessName), v...))
	})
}

// BusinessNameNotIn applies the NotIn predicate on the "BusinessName" field.
func BusinessNameNotIn(vs ...string) predicate.Retailer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBusinessName), v...))
	})
}

// BusinessNameGT applies the GT predicate on the "BusinessName" field.
func BusinessNameGT(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBusinessName), v))
	})
}

// BusinessNameGTE applies the GTE predicate on the "BusinessName" field.
func BusinessNameGTE(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBusinessName), v))
	})
}

// BusinessNameLT applies the LT predicate on the "BusinessName" field.
func BusinessNameLT(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBusinessName), v))
	})
}

// BusinessNameLTE applies the LTE predicate on the "BusinessName" field.
func BusinessNameLTE(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBusinessName), v))
	})
}

// BusinessNameContains applies the Contains predicate on the "BusinessName" field.
func BusinessNameContains(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBusinessName), v))
	})
}

// BusinessNameHasPrefix applies the HasPrefix predicate on the "BusinessName" field.
func BusinessNameHasPrefix(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBusinessName), v))
	})
}

// BusinessNameHasSuffix applies the HasSuffix predicate on the "BusinessName" field.
func BusinessNameHasSuffix(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBusinessName), v))
	})
}

// BusinessNameEqualFold applies the EqualFold predicate on the "BusinessName" field.
func BusinessNameEqualFold(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBusinessName), v))
	})
}

// BusinessNameContainsFold applies the ContainsFold predicate on the "BusinessName" field.
func BusinessNameContainsFold(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBusinessName), v))
	})
}

// ContactPersonEQ applies the EQ predicate on the "ContactPerson" field.
func ContactPersonEQ(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContactPerson), v))
	})
}

// ContactPersonNEQ applies the NEQ predicate on the "ContactPerson" field.
func ContactPersonNEQ(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContactPerson), v))
	})
}

// ContactPersonIn applies the In predicate on the "ContactPerson" field.
func ContactPersonIn(vs ...string) predicate.Retailer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldContactPerson), v...))
	})
}

// ContactPersonNotIn applies the NotIn predicate on the "ContactPerson" field.
func ContactPersonNotIn(vs ...string) predicate.Retailer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldContactPerson), v...))
	})
}

// ContactPersonGT applies the GT predicate on the "ContactPerson" field.
func ContactPersonGT(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContactPerson), v))
	})
}

// ContactPersonGTE applies the GTE predicate on the "ContactPerson" field.
func ContactPersonGTE(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContactPerson), v))
	})
}

// ContactPersonLT applies the LT predicate on the "ContactPerson" field.
func ContactPersonLT(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContactPerson), v))
	})
}

// ContactPersonLTE applies the LTE predicate on the "ContactPerson" field.
func ContactPersonLTE(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContactPerson), v))
	})
}

// ContactPersonContains applies the Contains predicate on the "ContactPerson" field.
func ContactPersonContains(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContactPerson), v))
	})
}

// ContactPersonHasPrefix applies the HasPrefix predicate on the "ContactPerson" field.
func ContactPersonHasPrefix(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContactPerson), v))
	})
}

// ContactPersonHasSuffix applies the HasSuffix predicate on the "ContactPerson" field.
func ContactPersonHasSuffix(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContactPerson), v))
	})
}

// ContactPersonEqualFold applies the EqualFold predicate on the "ContactPerson" field.
func ContactPersonEqualFold(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContactPerson), v))
	})
}

// ContactPersonContainsFold applies the ContainsFold predicate on the "ContactPerson" field.
func ContactPersonContainsFold(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContactPerson), v))
	})
}

// ContactNumberEQ applies the EQ predicate on the "ContactNumber" field.
func ContactNumberEQ(v int32) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContactNumber), v))
	})
}

// ContactNumberNEQ applies the NEQ predicate on the "ContactNumber" field.
func ContactNumberNEQ(v int32) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContactNumber), v))
	})
}

// ContactNumberIn applies the In predicate on the "ContactNumber" field.
func ContactNumberIn(vs ...int32) predicate.Retailer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldContactNumber), v...))
	})
}

// ContactNumberNotIn applies the NotIn predicate on the "ContactNumber" field.
func ContactNumberNotIn(vs ...int32) predicate.Retailer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldContactNumber), v...))
	})
}

// ContactNumberGT applies the GT predicate on the "ContactNumber" field.
func ContactNumberGT(v int32) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContactNumber), v))
	})
}

// ContactNumberGTE applies the GTE predicate on the "ContactNumber" field.
func ContactNumberGTE(v int32) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContactNumber), v))
	})
}

// ContactNumberLT applies the LT predicate on the "ContactNumber" field.
func ContactNumberLT(v int32) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContactNumber), v))
	})
}

// ContactNumberLTE applies the LTE predicate on the "ContactNumber" field.
func ContactNumberLTE(v int32) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContactNumber), v))
	})
}

// ContactAddressEQ applies the EQ predicate on the "ContactAddress" field.
func ContactAddressEQ(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContactAddress), v))
	})
}

// ContactAddressNEQ applies the NEQ predicate on the "ContactAddress" field.
func ContactAddressNEQ(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContactAddress), v))
	})
}

// ContactAddressIn applies the In predicate on the "ContactAddress" field.
func ContactAddressIn(vs ...string) predicate.Retailer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldContactAddress), v...))
	})
}

// ContactAddressNotIn applies the NotIn predicate on the "ContactAddress" field.
func ContactAddressNotIn(vs ...string) predicate.Retailer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldContactAddress), v...))
	})
}

// ContactAddressGT applies the GT predicate on the "ContactAddress" field.
func ContactAddressGT(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContactAddress), v))
	})
}

// ContactAddressGTE applies the GTE predicate on the "ContactAddress" field.
func ContactAddressGTE(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContactAddress), v))
	})
}

// ContactAddressLT applies the LT predicate on the "ContactAddress" field.
func ContactAddressLT(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContactAddress), v))
	})
}

// ContactAddressLTE applies the LTE predicate on the "ContactAddress" field.
func ContactAddressLTE(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContactAddress), v))
	})
}

// ContactAddressContains applies the Contains predicate on the "ContactAddress" field.
func ContactAddressContains(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContactAddress), v))
	})
}

// ContactAddressHasPrefix applies the HasPrefix predicate on the "ContactAddress" field.
func ContactAddressHasPrefix(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContactAddress), v))
	})
}

// ContactAddressHasSuffix applies the HasSuffix predicate on the "ContactAddress" field.
func ContactAddressHasSuffix(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContactAddress), v))
	})
}

// ContactAddressEqualFold applies the EqualFold predicate on the "ContactAddress" field.
func ContactAddressEqualFold(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContactAddress), v))
	})
}

// ContactAddressContainsFold applies the ContainsFold predicate on the "ContactAddress" field.
func ContactAddressContainsFold(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContactAddress), v))
	})
}

// ContactEmailIdEQ applies the EQ predicate on the "ContactEmailId" field.
func ContactEmailIdEQ(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContactEmailId), v))
	})
}

// ContactEmailIdNEQ applies the NEQ predicate on the "ContactEmailId" field.
func ContactEmailIdNEQ(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContactEmailId), v))
	})
}

// ContactEmailIdIn applies the In predicate on the "ContactEmailId" field.
func ContactEmailIdIn(vs ...string) predicate.Retailer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldContactEmailId), v...))
	})
}

// ContactEmailIdNotIn applies the NotIn predicate on the "ContactEmailId" field.
func ContactEmailIdNotIn(vs ...string) predicate.Retailer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldContactEmailId), v...))
	})
}

// ContactEmailIdGT applies the GT predicate on the "ContactEmailId" field.
func ContactEmailIdGT(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContactEmailId), v))
	})
}

// ContactEmailIdGTE applies the GTE predicate on the "ContactEmailId" field.
func ContactEmailIdGTE(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContactEmailId), v))
	})
}

// ContactEmailIdLT applies the LT predicate on the "ContactEmailId" field.
func ContactEmailIdLT(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContactEmailId), v))
	})
}

// ContactEmailIdLTE applies the LTE predicate on the "ContactEmailId" field.
func ContactEmailIdLTE(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContactEmailId), v))
	})
}

// ContactEmailIdContains applies the Contains predicate on the "ContactEmailId" field.
func ContactEmailIdContains(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContactEmailId), v))
	})
}

// ContactEmailIdHasPrefix applies the HasPrefix predicate on the "ContactEmailId" field.
func ContactEmailIdHasPrefix(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContactEmailId), v))
	})
}

// ContactEmailIdHasSuffix applies the HasSuffix predicate on the "ContactEmailId" field.
func ContactEmailIdHasSuffix(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContactEmailId), v))
	})
}

// ContactEmailIdEqualFold applies the EqualFold predicate on the "ContactEmailId" field.
func ContactEmailIdEqualFold(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContactEmailId), v))
	})
}

// ContactEmailIdContainsFold applies the ContainsFold predicate on the "ContactEmailId" field.
func ContactEmailIdContainsFold(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContactEmailId), v))
	})
}

// StatusEQ applies the EQ predicate on the "Status" field.
func StatusEQ(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "Status" field.
func StatusNEQ(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "Status" field.
func StatusIn(vs ...string) predicate.Retailer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "Status" field.
func StatusNotIn(vs ...string) predicate.Retailer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "Status" field.
func StatusGT(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "Status" field.
func StatusGTE(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "Status" field.
func StatusLT(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "Status" field.
func StatusLTE(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusContains applies the Contains predicate on the "Status" field.
func StatusContains(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStatus), v))
	})
}

// StatusHasPrefix applies the HasPrefix predicate on the "Status" field.
func StatusHasPrefix(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStatus), v))
	})
}

// StatusHasSuffix applies the HasSuffix predicate on the "Status" field.
func StatusHasSuffix(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStatus), v))
	})
}

// StatusEqualFold applies the EqualFold predicate on the "Status" field.
func StatusEqualFold(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStatus), v))
	})
}

// StatusContainsFold applies the ContainsFold predicate on the "Status" field.
func StatusContainsFold(v string) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStatus), v))
	})
}

// OutletLimitEQ applies the EQ predicate on the "OutletLimit" field.
func OutletLimitEQ(v int32) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOutletLimit), v))
	})
}

// OutletLimitNEQ applies the NEQ predicate on the "OutletLimit" field.
func OutletLimitNEQ(v int32) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOutletLimit), v))
	})
}

// OutletLimitIn applies the In predicate on the "OutletLimit" field.
func OutletLimitIn(vs ...int32) predicate.Retailer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOutletLimit), v...))
	})
}

// OutletLimitNotIn applies the NotIn predicate on the "OutletLimit" field.
func OutletLimitNotIn(vs ...int32) predicate.Retailer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOutletLimit), v...))
	})
}

// OutletLimitGT applies the GT predicate on the "OutletLimit" field.
func OutletLimitGT(v int32) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOutletLimit), v))
	})
}

// OutletLimitGTE applies the GTE predicate on the "OutletLimit" field.
func OutletLimitGTE(v int32) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOutletLimit), v))
	})
}

// OutletLimitLT applies the LT predicate on the "OutletLimit" field.
func OutletLimitLT(v int32) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOutletLimit), v))
	})
}

// OutletLimitLTE applies the LTE predicate on the "OutletLimit" field.
func OutletLimitLTE(v int32) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOutletLimit), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Retailer) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Retailer) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Retailer) predicate.Retailer {
	return predicate.Retailer(func(s *sql.Selector) {
		p(s.Not())
	})
}
