// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"retent/ent/predicate"
	"retent/ent/retailer"
	"sync"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeRetailer = "Retailer"
)

// RetailerMutation represents an operation that mutates the Retailer nodes in the graph.
type RetailerMutation struct {
	config
	op                Op
	typ               string
	id                *int
	_GSTIN            *string
	_BusinessName     *string
	_ContactPerson    *string
	_ContactNumber    *int32
	add_ContactNumber *int32
	_ContactAddress   *string
	_ContactEmailId   *string
	_Status           *string
	_OutletLimit      *int32
	add_OutletLimit   *int32
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*Retailer, error)
	predicates        []predicate.Retailer
}

var _ ent.Mutation = (*RetailerMutation)(nil)

// retailerOption allows management of the mutation configuration using functional options.
type retailerOption func(*RetailerMutation)

// newRetailerMutation creates new mutation for the Retailer entity.
func newRetailerMutation(c config, op Op, opts ...retailerOption) *RetailerMutation {
	m := &RetailerMutation{
		config:        c,
		op:            op,
		typ:           TypeRetailer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRetailerID sets the ID field of the mutation.
func withRetailerID(id int) retailerOption {
	return func(m *RetailerMutation) {
		var (
			err   error
			once  sync.Once
			value *Retailer
		)
		m.oldValue = func(ctx context.Context) (*Retailer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Retailer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRetailer sets the old Retailer of the mutation.
func withRetailer(node *Retailer) retailerOption {
	return func(m *RetailerMutation) {
		m.oldValue = func(context.Context) (*Retailer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RetailerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RetailerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RetailerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RetailerMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Retailer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetGSTIN sets the "GSTIN" field.
func (m *RetailerMutation) SetGSTIN(s string) {
	m._GSTIN = &s
}

// GSTIN returns the value of the "GSTIN" field in the mutation.
func (m *RetailerMutation) GSTIN() (r string, exists bool) {
	v := m._GSTIN
	if v == nil {
		return
	}
	return *v, true
}

// OldGSTIN returns the old "GSTIN" field's value of the Retailer entity.
// If the Retailer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RetailerMutation) OldGSTIN(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGSTIN is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGSTIN requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGSTIN: %w", err)
	}
	return oldValue.GSTIN, nil
}

// ResetGSTIN resets all changes to the "GSTIN" field.
func (m *RetailerMutation) ResetGSTIN() {
	m._GSTIN = nil
}

// SetBusinessName sets the "BusinessName" field.
func (m *RetailerMutation) SetBusinessName(s string) {
	m._BusinessName = &s
}

// BusinessName returns the value of the "BusinessName" field in the mutation.
func (m *RetailerMutation) BusinessName() (r string, exists bool) {
	v := m._BusinessName
	if v == nil {
		return
	}
	return *v, true
}

// OldBusinessName returns the old "BusinessName" field's value of the Retailer entity.
// If the Retailer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RetailerMutation) OldBusinessName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBusinessName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBusinessName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBusinessName: %w", err)
	}
	return oldValue.BusinessName, nil
}

// ResetBusinessName resets all changes to the "BusinessName" field.
func (m *RetailerMutation) ResetBusinessName() {
	m._BusinessName = nil
}

// SetContactPerson sets the "ContactPerson" field.
func (m *RetailerMutation) SetContactPerson(s string) {
	m._ContactPerson = &s
}

// ContactPerson returns the value of the "ContactPerson" field in the mutation.
func (m *RetailerMutation) ContactPerson() (r string, exists bool) {
	v := m._ContactPerson
	if v == nil {
		return
	}
	return *v, true
}

// OldContactPerson returns the old "ContactPerson" field's value of the Retailer entity.
// If the Retailer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RetailerMutation) OldContactPerson(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContactPerson is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContactPerson requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContactPerson: %w", err)
	}
	return oldValue.ContactPerson, nil
}

// ResetContactPerson resets all changes to the "ContactPerson" field.
func (m *RetailerMutation) ResetContactPerson() {
	m._ContactPerson = nil
}

// SetContactNumber sets the "ContactNumber" field.
func (m *RetailerMutation) SetContactNumber(i int32) {
	m._ContactNumber = &i
	m.add_ContactNumber = nil
}

// ContactNumber returns the value of the "ContactNumber" field in the mutation.
func (m *RetailerMutation) ContactNumber() (r int32, exists bool) {
	v := m._ContactNumber
	if v == nil {
		return
	}
	return *v, true
}

// OldContactNumber returns the old "ContactNumber" field's value of the Retailer entity.
// If the Retailer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RetailerMutation) OldContactNumber(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContactNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContactNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContactNumber: %w", err)
	}
	return oldValue.ContactNumber, nil
}

// AddContactNumber adds i to the "ContactNumber" field.
func (m *RetailerMutation) AddContactNumber(i int32) {
	if m.add_ContactNumber != nil {
		*m.add_ContactNumber += i
	} else {
		m.add_ContactNumber = &i
	}
}

// AddedContactNumber returns the value that was added to the "ContactNumber" field in this mutation.
func (m *RetailerMutation) AddedContactNumber() (r int32, exists bool) {
	v := m.add_ContactNumber
	if v == nil {
		return
	}
	return *v, true
}

// ResetContactNumber resets all changes to the "ContactNumber" field.
func (m *RetailerMutation) ResetContactNumber() {
	m._ContactNumber = nil
	m.add_ContactNumber = nil
}

// SetContactAddress sets the "ContactAddress" field.
func (m *RetailerMutation) SetContactAddress(s string) {
	m._ContactAddress = &s
}

// ContactAddress returns the value of the "ContactAddress" field in the mutation.
func (m *RetailerMutation) ContactAddress() (r string, exists bool) {
	v := m._ContactAddress
	if v == nil {
		return
	}
	return *v, true
}

// OldContactAddress returns the old "ContactAddress" field's value of the Retailer entity.
// If the Retailer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RetailerMutation) OldContactAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContactAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContactAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContactAddress: %w", err)
	}
	return oldValue.ContactAddress, nil
}

// ResetContactAddress resets all changes to the "ContactAddress" field.
func (m *RetailerMutation) ResetContactAddress() {
	m._ContactAddress = nil
}

// SetContactEmailId sets the "ContactEmailId" field.
func (m *RetailerMutation) SetContactEmailId(s string) {
	m._ContactEmailId = &s
}

// ContactEmailId returns the value of the "ContactEmailId" field in the mutation.
func (m *RetailerMutation) ContactEmailId() (r string, exists bool) {
	v := m._ContactEmailId
	if v == nil {
		return
	}
	return *v, true
}

// OldContactEmailId returns the old "ContactEmailId" field's value of the Retailer entity.
// If the Retailer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RetailerMutation) OldContactEmailId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContactEmailId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContactEmailId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContactEmailId: %w", err)
	}
	return oldValue.ContactEmailId, nil
}

// ResetContactEmailId resets all changes to the "ContactEmailId" field.
func (m *RetailerMutation) ResetContactEmailId() {
	m._ContactEmailId = nil
}

// SetStatus sets the "Status" field.
func (m *RetailerMutation) SetStatus(s string) {
	m._Status = &s
}

// Status returns the value of the "Status" field in the mutation.
func (m *RetailerMutation) Status() (r string, exists bool) {
	v := m._Status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "Status" field's value of the Retailer entity.
// If the Retailer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RetailerMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "Status" field.
func (m *RetailerMutation) ResetStatus() {
	m._Status = nil
}

// SetOutletLimit sets the "OutletLimit" field.
func (m *RetailerMutation) SetOutletLimit(i int32) {
	m._OutletLimit = &i
	m.add_OutletLimit = nil
}

// OutletLimit returns the value of the "OutletLimit" field in the mutation.
func (m *RetailerMutation) OutletLimit() (r int32, exists bool) {
	v := m._OutletLimit
	if v == nil {
		return
	}
	return *v, true
}

// OldOutletLimit returns the old "OutletLimit" field's value of the Retailer entity.
// If the Retailer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RetailerMutation) OldOutletLimit(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOutletLimit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOutletLimit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOutletLimit: %w", err)
	}
	return oldValue.OutletLimit, nil
}

// AddOutletLimit adds i to the "OutletLimit" field.
func (m *RetailerMutation) AddOutletLimit(i int32) {
	if m.add_OutletLimit != nil {
		*m.add_OutletLimit += i
	} else {
		m.add_OutletLimit = &i
	}
}

// AddedOutletLimit returns the value that was added to the "OutletLimit" field in this mutation.
func (m *RetailerMutation) AddedOutletLimit() (r int32, exists bool) {
	v := m.add_OutletLimit
	if v == nil {
		return
	}
	return *v, true
}

// ResetOutletLimit resets all changes to the "OutletLimit" field.
func (m *RetailerMutation) ResetOutletLimit() {
	m._OutletLimit = nil
	m.add_OutletLimit = nil
}

// Where appends a list predicates to the RetailerMutation builder.
func (m *RetailerMutation) Where(ps ...predicate.Retailer) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *RetailerMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Retailer).
func (m *RetailerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RetailerMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m._GSTIN != nil {
		fields = append(fields, retailer.FieldGSTIN)
	}
	if m._BusinessName != nil {
		fields = append(fields, retailer.FieldBusinessName)
	}
	if m._ContactPerson != nil {
		fields = append(fields, retailer.FieldContactPerson)
	}
	if m._ContactNumber != nil {
		fields = append(fields, retailer.FieldContactNumber)
	}
	if m._ContactAddress != nil {
		fields = append(fields, retailer.FieldContactAddress)
	}
	if m._ContactEmailId != nil {
		fields = append(fields, retailer.FieldContactEmailId)
	}
	if m._Status != nil {
		fields = append(fields, retailer.FieldStatus)
	}
	if m._OutletLimit != nil {
		fields = append(fields, retailer.FieldOutletLimit)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RetailerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case retailer.FieldGSTIN:
		return m.GSTIN()
	case retailer.FieldBusinessName:
		return m.BusinessName()
	case retailer.FieldContactPerson:
		return m.ContactPerson()
	case retailer.FieldContactNumber:
		return m.ContactNumber()
	case retailer.FieldContactAddress:
		return m.ContactAddress()
	case retailer.FieldContactEmailId:
		return m.ContactEmailId()
	case retailer.FieldStatus:
		return m.Status()
	case retailer.FieldOutletLimit:
		return m.OutletLimit()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RetailerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case retailer.FieldGSTIN:
		return m.OldGSTIN(ctx)
	case retailer.FieldBusinessName:
		return m.OldBusinessName(ctx)
	case retailer.FieldContactPerson:
		return m.OldContactPerson(ctx)
	case retailer.FieldContactNumber:
		return m.OldContactNumber(ctx)
	case retailer.FieldContactAddress:
		return m.OldContactAddress(ctx)
	case retailer.FieldContactEmailId:
		return m.OldContactEmailId(ctx)
	case retailer.FieldStatus:
		return m.OldStatus(ctx)
	case retailer.FieldOutletLimit:
		return m.OldOutletLimit(ctx)
	}
	return nil, fmt.Errorf("unknown Retailer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RetailerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case retailer.FieldGSTIN:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGSTIN(v)
		return nil
	case retailer.FieldBusinessName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBusinessName(v)
		return nil
	case retailer.FieldContactPerson:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContactPerson(v)
		return nil
	case retailer.FieldContactNumber:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContactNumber(v)
		return nil
	case retailer.FieldContactAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContactAddress(v)
		return nil
	case retailer.FieldContactEmailId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContactEmailId(v)
		return nil
	case retailer.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case retailer.FieldOutletLimit:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOutletLimit(v)
		return nil
	}
	return fmt.Errorf("unknown Retailer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RetailerMutation) AddedFields() []string {
	var fields []string
	if m.add_ContactNumber != nil {
		fields = append(fields, retailer.FieldContactNumber)
	}
	if m.add_OutletLimit != nil {
		fields = append(fields, retailer.FieldOutletLimit)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RetailerMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case retailer.FieldContactNumber:
		return m.AddedContactNumber()
	case retailer.FieldOutletLimit:
		return m.AddedOutletLimit()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RetailerMutation) AddField(name string, value ent.Value) error {
	switch name {
	case retailer.FieldContactNumber:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddContactNumber(v)
		return nil
	case retailer.FieldOutletLimit:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOutletLimit(v)
		return nil
	}
	return fmt.Errorf("unknown Retailer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RetailerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RetailerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RetailerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Retailer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RetailerMutation) ResetField(name string) error {
	switch name {
	case retailer.FieldGSTIN:
		m.ResetGSTIN()
		return nil
	case retailer.FieldBusinessName:
		m.ResetBusinessName()
		return nil
	case retailer.FieldContactPerson:
		m.ResetContactPerson()
		return nil
	case retailer.FieldContactNumber:
		m.ResetContactNumber()
		return nil
	case retailer.FieldContactAddress:
		m.ResetContactAddress()
		return nil
	case retailer.FieldContactEmailId:
		m.ResetContactEmailId()
		return nil
	case retailer.FieldStatus:
		m.ResetStatus()
		return nil
	case retailer.FieldOutletLimit:
		m.ResetOutletLimit()
		return nil
	}
	return fmt.Errorf("unknown Retailer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RetailerMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RetailerMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RetailerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RetailerMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RetailerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RetailerMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RetailerMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Retailer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RetailerMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Retailer edge %s", name)
}
